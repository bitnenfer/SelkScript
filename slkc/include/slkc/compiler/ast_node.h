#ifndef SLKC_COMPILER_AST_NODE_H
#define SLKC_COMPILER_AST_NODE_H

#include <slkc/types.h>

typedef enum skEAstNodeType
{
	NODE_TYPE_NAME,
	NODE_CONST_BOOL,
	NODE_CONST_INT,
	NODE_CONST_FLOAT,
	NODE_CONST_STRING,
	NODE_CONST_STRUCT,
	NODE_CONST_ARRAY,
	NODE_CONST_VARNAME,
	NODE_EXPR_CALL,
	NODE_EXPR_NEGATE,
	NODE_EXPR_MULTIPLICATIVE,
	NODE_EXPR_ADDITIVE,
	NODE_EXPR_MODULUS,
	NODE_EXPR_BITWISE_SHL,
	NODE_EXPR_BITWISE_SHR,
	NODE_EXPR_BITWISE_XOR,
	NODE_EXPR_BITWISE_OR,
	NODE_EXPR_BITWISE_AND,
	NODE_EXPR_CMP_EQ,
	NODE_EXPR_CMP_GT,
	NODE_EXPR_CMP_LT,
	NODE_EXPR_CMP_NE,
	NODE_EXPR_CMP_GTE,
	NODE_EXPR_CMP_LTE,
	NODE_EXPR_NOT,
	NODE_EXPR_LOGIC_AND,
	NODE_EXPR_LOGIC_OR,
	NODE_EXPR_MEMBER_ACCESS,
	NODE_EXPR_LIST,
	NODE_DECL_VAR,
	NODE_DECL_VAR_LIST,
	NODE_DECL_STRUCT,
	NODE_DECL_FUNCTION,
	NODE_STMT_RETURN,
	NODE_STMT_WHILE,
	NODE_STMT_CONTINUE,
	NODE_STMT_BREAK,
	NODE_STMT_ASSING,
	NODE_STMT_ELSE,
	NODE_STMT_ELSE_IF,
	NODE_STMT_IF,
	NODE_STMT_SEQ,
	NODE_PROGRAM,
	NODE_EOF
} skEAstNodeType;

struct skAstNode;
typedef struct skStructType
{
	usize ID;
	struct skAstNode* body;
} skStructType;

typedef struct skAstNode
{
	skEAstNodeType type;
	struct kAstNode* left;
	struct skAstNode* right;
	usize line;
	union
	{
		int32 INT32;
		float32 FLOAT32;
		bool BOOL;
		ascii_char* STRING;

	};
} skAstNode;

#endif /* !SLKC_COMPILER_AST_NODE_H */